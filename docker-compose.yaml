services:
  redis:
    image: redis:alpine
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    networks:
      - app_network

  mongo:
    image: mongo:7.0.12
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27018:27017
    volumes:
      - mongo_data:/data/db
    networks:
      - app_network

  postgres:
    image: postgres:14.12
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-databases.sql:/docker-entrypoint-initdb.d/postgres-databases.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5434:5432
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready -U supertokens_user']
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    image: supertokens/supertokens-postgresql:6.0
    depends_on:
      - postgres
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/supertokens"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  trino:
    image: trinodb/trino:431
    volumes:
      - ./mongodb.properties:/etc/trino/catalog/mongodb.properties
    depends_on:
      - mongo
    networks:
      - app_network
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  redis_data:
  mongo_data:
  postgres_data:
